#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
        };

        Auto_Shift: Auto_Shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <200>;
            quick-tap-ms = <200>;
            hold-trigger-key-positions = <65 70>;
            retro-tap;
        };

        Tap_Repeat: Tap_Repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_REPEAT";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <125>;
            retro-tap;
            hold-while-undecided;
        };

        Sticky_Lazy: Sticky_Lazy {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_LAZY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <1000>;
            quick-release;
            lazy;
        };

        Hold_Tap_Sticky: Hold_Tap_Sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_STICKY";
            bindings = <&kp>, <&Sticky_Lazy>;

            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <500>;
            hold-while-undecided;
            retro-tap;
        };

        TapKey_HoldMod: TapKey_HoldMod {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPKEY_HOLDMOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <200>;
            tapping-term-ms = <5000>;
            retro-tap;
        };

        custom_shift: custom_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "CUSTOM_SHIFT";
            bindings = <&kp SQT>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        e_SQT_LPAR: e_SQT_LPAR {
            compatible = "zmk,behavior-mod-morph";
            label = "E_SQT_LPAR";
            bindings = <&kp SQT>, <&kp LPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        Combo_Caps {
            bindings = <&kp CAPS>;
            key-positions = <66 69>;
            layers = <0>;
        };

        Combo_Tab {
            bindings = <&kp TAB>;
            key-positions = <32 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp EQUAL  &kp N1     &kp N2  &kp N3    &kp N4     &kp N5  &tog 1                                                                                                          &mo 5             &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB    &kp Q      &kp W   &kp E     &kp R      &kp T   &none                                                                                                           &kp C_PLAY_PAUSE  &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC    &kp A      &kp S   &kp D     &kp F      &kp G   &none           &Tap_Repeat LEFT_CONTROL 0  &TapKey_HoldMod LALT LS(LG(S))      &kp LGUI   &Tap_Repeat RCTRL 0  &kp CAPS          &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp DEL    &kp Z      &kp X   &kp C     &kp V      &kp B                                               &kp HOME                            &kp PG_UP                                         &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp BACKSPACE
&mo 4      &kp GRAVE  &mo 3   &kp LEFT  &kp RIGHT          &kp LEFT_SHIFT  &mo 3                       &kp END                             &kp PG_DN  &kp ENTER            &kp SPACE                 &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &mo 4
            >;
        };

        engram {
            bindings = <
&kp GRAVE                  &kp N1    &kp N2  &kp N3    &kp N4     &kp N5     &trans                                                                                                  &mo 5             &kp N6             &kp N7  &kp N8    &kp N9  &kp N0    &kp PERCENT
&kp Q                      &kp B     &kp Y   &kp O     &kp U      &kp APOS   &none                                                                                                   &kp C_PLAY_PAUSE  &kp DOUBLE_QUOTES  &kp L   &kp D     &kp W   &kp V     &kp Z
&kp ESC                    &kp C     &kp I   &kp E     &kp A      &kp COMMA  &none   &Tap_Repeat LEFT_CONTROL 0  &TapKey_HoldMod LALT LS(LG(S))      &kp LGUI   &Tap_Repeat RCTRL 0  &kp CAPS          &kp PERIOD         &kp H   &kp T     &kp S   &kp N     &kp ENTER
&TapKey_HoldMod LSHFT DEL  &kp G     &kp X   &kp J     &kp K      &kp UNDER                                      &kp HOME                            &kp PG_UP                                         &kp QUESTION       &kp R   &kp M     &kp F   &kp P     &TapKey_HoldMod RSHIFT BACKSPACE
&mo 4                      &kp LBKT  &kp LT  &kp LEFT  &kp RIGHT             &mo 2   &mo 3                       &kp END                             &kp PG_DN  &kp TAB              &kp SPACE                            &kp UP  &kp DOWN  &kp GT  &kp RBKT  &mo 4
            >;
        };

        shift_engram {
            bindings = <
&kp TILDE                       &kp BACKSLASH   &kp AT     &kp POUND  &kp DOLLAR  &kp PERCENT           &none                                                                    &mo 5             &kp CARET              &kp SLASH  &kp STAR   &kp MINUS  &kp PLUS         &kp PERCENT
&kp LS(Q)                       &kp LS(B)       &kp LS(Y)  &kp LS(O)  &kp LS(U)   &kp LEFT_PARENTHESIS  &kp AMPERSAND                                                            &kp C_PLAY_PAUSE  &kp RIGHT_PARENTHESIS  &kp LS(L)  &kp LS(D)  &kp LS(W)  &kp LS(V)        &kp LS(Z)
&kp LS(ESC)                     &kp LS(C)       &kp LS(I)  &kp LS(E)  &kp LS(A)   &kp SEMI              &kp PIPE       &trans  &trans            &kp LS(LWIN)       &trans       &kp CAPS          &kp COLON              &kp LS(H)  &kp LS(T)  &kp LS(S)  &kp LS(N)        &kp LS(ENTER)
&TapKey_HoldMod LSHIFT LS(DEL)  &kp LS(G)       &kp LS(X)  &kp LS(J)  &kp LS(K)   &kp EQUAL                                    &kp LS(HOME)      &kp LS(PAGE_UP)                                   &kp EXCL               &kp LS(R)  &kp LS(M)  &kp LS(F)  &kp LS(P)        &TapKey_HoldMod RSHIFT LS(BACKSPACE)
&mo 4                           &kp LEFT_BRACE  &kp LT     &kp LEFT   &kp RIGHT                         &trans         &trans  &kp LS(END)       &kp LS(PAGE_DOWN)  &kp LS(TAB)  &kp LS(SPACE)                            &kp UP     &kp DOWN   &kp GT     &kp RIGHT_BRACE  &mo 4
            >;
        };

        keypad {
            bindings = <
&kp TILDE  &kp BACKSLASH   &kp AT  &kp POUND  &kp DOLLAR  &kp PERCENT           &kp INS                                         &kp KP_NUMLOCK     &kp CARET              &kp SLASH  &kp STAR  &kp MINUS  &kp PLUS         &kp PERCENT
&kp TAB    &none           &none   &none      &none       &kp LEFT_PARENTHESIS  &kp C_PREV                                      &kp C_VOLUME_UP    &kp RIGHT_PARENTHESIS  &kp N7     &kp N8    &kp N9     &kp MINUS        &kp BSLH
&kp ESC    &none           &none   &none      &none       &kp SEMI              &kp C_NEXT  &trans  &trans      &trans  &trans  &kp C_VOLUME_DOWN  &kp COLON              &kp N4     &kp N5    &kp N6     &kp PLUS         &kp ENTER
&trans     &none           &none   &none      &none       &kp EQUAL                                 &trans      &trans                             &kp EXCL               &kp N1     &kp N2    &kp N3     &none            &trans
&mo 4      &kp LEFT_BRACE  &none   &kp LEFT   &kp RIGHT                         &trans      &trans  &trans      &trans  &trans  &kp N0                                    &kp UP     &kp DOWN  &kp DOT    &kp RIGHT_BRACE  &mo 4
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6  &tog 3                                      &mo 5   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &none   &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &trans       &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
